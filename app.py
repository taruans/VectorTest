"""
Basit bir Flask uygulamasÄ± ile Milvus Lite kullanan bir vektÃ¶r arama Ã¶rneÄŸi.

Bu uygulama, kullanÄ±cÄ±larÄ±n metin belgelerini veya doÄŸrudan yazdÄ±klarÄ±
metinleri yÃ¼kleyebilmelerine ve ardÄ±ndan bu metinler arasÄ±nda arama
yapabilmelerine olanak tanÄ±r. Belgeler, SentenceTransformer koleksiyonundan
"intfloat/multilingual-e5-large" modeli kullanÄ±larak sabit boyutlu vektÃ¶rlere
dÃ¶nÃ¼ÅŸtÃ¼rÃ¼lÃ¼r ve Milvus Lite veritabanÄ±nda saklanÄ±r.

Not: Milvus Lite, yerel bir veritabanÄ± dosyasÄ± Ã¼zerinden Ã§alÄ±ÅŸÄ±r. Bu dosya
oluÅŸturulduÄŸunda Milvus arka planda otomatik olarak ayaÄŸa kalkar ve
Flask uygulamasÄ±yla aynÄ± iÅŸlem iÃ§erisinde Ã§alÄ±ÅŸÄ±r. EÄŸer dinamik kÃ¼tÃ¼phane
yollarÄ±yla ilgili bir sorun yaÅŸanÄ±rsa, aÅŸaÄŸÄ±daki kodda yer alan
LD_LIBRARY_PATH ayarÄ± bu durumu dÃ¼zeltmeye yardÄ±mcÄ± olabilir.
"""

import os
import site
import logging
from flask import Flask, render_template, request, redirect
from pymilvus import MilvusClient, DataType
from sentence_transformers import SentenceTransformer

# LoglamayÄ± yapÄ±landÄ±r
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("app.log"),
        logging.StreamHandler()
    ]
)
# -----------------------------------------------------------------------------
# Milvus Lite iÃ§in dinamik kÃ¼tÃ¼phane yolu ayarÄ±
# Milvus Lite Ã§alÄ±ÅŸtÄ±rÄ±ldÄ±ÄŸÄ±nda libknowhere.so gibi paylaÅŸÄ±lan kÃ¼tÃ¼phaneleri
# bulamama hatalarÄ± yaÅŸanabilir. Bu durumun Ã¶nÃ¼ne geÃ§mek iÃ§in
# site-packages iÃ§indeki milvus_lite/lib klasÃ¶rÃ¼nÃ¼ LD_LIBRARY_PATH deÄŸiÅŸkenine
# ekliyoruz. Bu ayar, uygulama MacOS Ã¼zerinde Ã§alÄ±ÅŸtÄ±rÄ±ldÄ±ÄŸÄ±nda gerek
# kalmayabilir ancak Linux tabanlÄ± ortamlar iÃ§in faydalÄ±dÄ±r.
lib_dir = None
for p in site.getsitepackages():
    candidate = os.path.join(p, "milvus_lite", "lib")
    if os.path.exists(candidate):
        lib_dir = candidate
        break
if lib_dir:
    current = os.environ.get("LD_LIBRARY_PATH", "")
    new_paths = lib_dir
    if current:
        new_paths = f"{lib_dir}:{current}"
    os.environ["LD_LIBRARY_PATH"] = new_paths

# -----------------------------------------------------------------------------
# Flask ve Milvus yapÄ±landÄ±rmasÄ±

app = Flask(__name__)

# Proje kÃ¶k dizini ve veritabanÄ± dosyasÄ±nÄ±n tanÄ±mlanmasÄ±
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DB_PATH = os.path.join(BASE_DIR, "vector_db.db")

EMBEDDING_MODEL_NAME = "intfloat/multilingual-e5-large"
COLLECTION_NAME = "documents"
VECTOR_DIM = 1024  # intfloat/multilingual-e5-large iÃ§in vektÃ¶r boyutu

# Belgelerin vektÃ¶rleÅŸtirilmesi iÃ§in SentenceTransformer kullanÄ±yoruz.
vectorizer = SentenceTransformer(EMBEDDING_MODEL_NAME)


def encode_document(text: str):
    """Belgeler iÃ§in E5 modeline uygun embedding hazÄ±rla."""
    return vectorizer.encode(
        f"passage: {text}",
        normalize_embeddings=True,
    ).tolist()


def encode_query(text: str):
    """Sorgular iÃ§in E5 modeline uygun embedding hazÄ±rla."""
    return vectorizer.encode(
        f"query: {text}",
        normalize_embeddings=True,
    ).tolist()


# Milvus istemcisini baÅŸlatÄ±yoruz. DB_PATH parametresi yerel dosyaya iÅŸaret eder.
client = MilvusClient(DB_PATH)


def ensure_collection(vector_dim: int):
    """Koleksiyon vektÃ¶r boyutu yeni modele uymuyorsa yeniden oluÅŸtur."""
    collection_exists = client.has_collection(COLLECTION_NAME)
    if collection_exists:
        try:
            schema = client.describe_collection(COLLECTION_NAME)
            vector_field = next(
                (field for field in schema.get("fields", []) if field.get("name") == "vector"),
                None,
            )
            current_dim = None
            if vector_field:
                params = vector_field.get("params") or {}
                current_dim = int(params.get("dim")) if params.get("dim") else None
            if current_dim and current_dim != vector_dim:
                logging.warning(
                    "Mevcut koleksiyon dim=%s, beklenen dim=%s. Koleksiyon dÃ¼ÅŸÃ¼rÃ¼lÃ¼yor...",
                    current_dim,
                    vector_dim,
                )
                client.drop_collection(COLLECTION_NAME)
                collection_exists = False
        except Exception as exc:  # pragma: no cover - koruyucu kontrol
            logging.error("Koleksiyon ÅŸemasÄ± okunamadÄ±: %s", exc)
            collection_exists = False

    if collection_exists:
        return

    # Koleksiyon mevcut deÄŸilse oluÅŸturulur. auto_id=True ayarÄ± ile birincil anahtar
    # otomatik olarak oluÅŸturulur. VektÃ¶r alanÄ± FLOAT_VECTOR tÃ¼rÃ¼nde olmalÄ± ve
    # boyutu Ã¶nceden belirlenmelidir.
    schema = MilvusClient.create_schema(auto_id=True)
    schema.add_field(field_name="id", datatype=DataType.INT64, is_primary=True)
    schema.add_field(field_name="vector", datatype=DataType.FLOAT_VECTOR, dim=VECTOR_DIM)
    schema.add_field(field_name="text", datatype=DataType.VARCHAR, max_length=2000)
    schema.add_field(field_name="filename", datatype=DataType.VARCHAR, max_length=255)

    index_params = client.prepare_index_params()
    index_params.add_index(
        field_name="vector",
        index_type="AUTOINDEX",
        metric_type="COSINE",
    )
    client.create_collection(
        collection_name=COLLECTION_NAME,
        schema=schema,
        index_params=index_params,
    )

    # Ã–rnek veri dosyasÄ±ndan yÃ¼kleme
    example_file = os.path.join(BASE_DIR, "initial_data.txt")
    if os.path.exists(example_file):
        with open(example_file, "r", encoding="utf-8") as f:
            lines = [line.strip() for line in f.readlines() if line.strip()]
            logging.info(f"YÃ¼kleniyor: {len(lines)} satÄ±r initial_data.txt dosyasÄ±ndan.")
            for line in lines:
                logging.info(f"VektÃ¶rleniyor ve ekleniyor: {line}")
            data = [
                {
                    "vector": encode_document(line),
                    "text": line,
                    "filename": "initial_data.txt"
                }
                for line in lines
            ]
            client.insert(collection_name=COLLECTION_NAME, data=data)
            client.flush(collection_name=COLLECTION_NAME)


ensure_collection(VECTOR_DIM)


@app.route("/", methods=["GET"])
def index():
    """Ana sayfa: yÃ¼kleme ve arama formlarÄ±nÄ± gÃ¶sterir."""
    return render_template("index.html", results=None)


@app.route("/upload", methods=["POST"])
def upload():
    """Dosya veya metin yÃ¼kleme iÅŸlemlerini gerÃ§ekleÅŸtirir."""
    file = request.files.get("file")
    text_input = request.form.get("text_input")

    # YÃ¼klenecek metin ve dosya adÄ± deÄŸiÅŸkenleri
    text = None
    filename = None

    # Ã–ncelikle dosya yÃ¼klenmiÅŸse onu kullanÄ±yoruz
    if file and file.filename:
        # DosyayÄ± UTF-8 olarak Ã§Ã¶z; hata oluÅŸursa karakterleri yoksay
        content_bytes = file.read()
        try:
            text = content_bytes.decode("utf-8")
        except Exception:
            text = content_bytes.decode("utf-8", errors="ignore")
        filename = file.filename
    # Dosya yoksa metin kutusundaki veri kullanÄ±lÄ±r
    elif text_input:
        text = text_input
        filename = "ManualInput"

    # Metin yoksa ana sayfaya yÃ¶nlendir
    if not text:
        return redirect("/")

    # Metni vektÃ¶rleÅŸtirme
    vector = encode_document(text)

    # Milvus'a eklemek Ã¼zere veri nesnesi
    data = [
        {
            "vector": vector,
            "text": text,
            "filename": filename,
        }
    ]

    # Veriyi koleksiyona ekle
    client.insert(collection_name=COLLECTION_NAME, data=data)
    # Verinin baÅŸarÄ±yla yazÄ±ldÄ±ÄŸÄ±ndan emin olmak iÃ§in flush iÅŸlemi
    client.flush(collection_name=COLLECTION_NAME)

    return redirect("/")


@app.route("/search", methods=["POST"])
def search():
    """KullanÄ±cÄ±nÄ±n verdiÄŸi sorgu cÃ¼mlesiyle koleksiyon Ã¼zerinde arama yapar."""
    query = request.form.get("query")
    logging.info(f"Arama isteÄŸi alÄ±ndÄ±. Sorgu: '{query}'")
    if not query:
        return redirect("/")

    try:
        # Sorgu vektÃ¶rÃ¼nÃ¼ hazÄ±rla
        query_vector = encode_query(query)

        # Koleksiyonu belleÄŸe yÃ¼kle
        client.load_collection(collection_name=COLLECTION_NAME)
        logging.info(f"Koleksiyon '{COLLECTION_NAME}' belleÄŸe yÃ¼klendi.")

        # Arama iÅŸlemi
        res = client.search(
            collection_name=COLLECTION_NAME,
            data=[query_vector],
            limit=10,
            output_fields=["text", "filename"],
            search_params={"metric_type": "COSINE"}
        )
        logging.info(f"Milvus aramasÄ± tamamlandÄ±. {len(res[0]) if res else 0} ham sonuÃ§ bulundu.")

        # SonuÃ§larÄ± iÅŸle, filtrele ve sÄ±rala
        results = []

        for hits in res:
            for item in hits:
                raw_distance = float(item.distance)
                similarity = 1.0 - raw_distance  # Milvus COSINE distance -> benzerliÄŸe dÃ¶nÃ¼ÅŸtÃ¼r
                similarity = max(0.0, min(1.0, similarity))

                text_value = item.entity.get("text", "")

                score_percent = int(round(similarity * 100))

                if score_percent >= 85: label = "ðŸ”µ Ã‡ok benzer"
                elif score_percent >= 70: label = "ðŸŸ¢ Benzer"
                elif score_percent >= 60: label = "ðŸŸ¡ KÄ±smen benzer"
                else: label = "âšª DÃ¼ÅŸÃ¼k benzerlik"

                result_data = {
                    "filename": item.entity.get("filename"),
                    "text": text_value,
                    "score": f"{score_percent}%",
                    "score_num": score_percent,
                    "label": label,
                }
                results.append(result_data)
                logging.info(f"Ä°ÅŸlenen sonuÃ§: score={score_percent}%, text='{result_data['text'][:100]}...'")

        logging.info(f"Toplam iÅŸlenen sonuÃ§ sayÄ±sÄ± (ham): {len(results)}")

        threshold = 60
        filtered_results = [r for r in results if r.get("score_num", 0) >= threshold]
        logging.info(f"EÅŸik (>={threshold}%) sonrasÄ± sonuÃ§ sayÄ±sÄ±: {len(filtered_results)}")

        if not filtered_results and results:
            logging.warning("EÅŸik sonrasÄ± sonuÃ§ yok. En iyi 3 ham sonuÃ§ gÃ¶steriliyor (fallback).")
            final_results = sorted(results, key=lambda x: x.get("score_num", 0), reverse=True)[:3]
        else:
            final_results = sorted(filtered_results, key=lambda x: x.get("score_num", 0), reverse=True)

        logging.info(f"Åžablona gÃ¶nderilecek nihai sonuÃ§ sayÄ±sÄ±: {len(final_results)}")
        return render_template('index.html', results=final_results, query=query)

    except Exception as e:
        logging.error(f"/search rotasÄ±nda beklenmedik bir hata oluÅŸtu: {e}", exc_info=True)
        return render_template('index.html', results=[], query=query, error="Arama sÄ±rasÄ±nda bir hata oluÅŸtu.")


if __name__ == "__main__":
    # Flask uygulamasÄ±nÄ± baÅŸlat
    # debug=True geliÅŸtirme ortamÄ±nda otomatik yeniden baÅŸlatma saÄŸlar.
    app.run(use_reloader=False)
